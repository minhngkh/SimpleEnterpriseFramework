<!-- Popup Form -->  
<div id="formModal" class="modal">
    <div class="modal-content">
        <span class="close" id="closeModalButton">&times;</span>
        <h2 id="formTitle">New {{tableName}}</h2>

        <form id="dataForm">
            <!-- Hidden field to pass the table name and mode (Create/Update) -->
            <input type="hidden" name="tableName" value="{{tableName}}">
            <input type="hidden" name="formMode" id="formMode" value="Create">
            <input style="display: none;" type="number" name="Id" id="rowId" value="">

            {{#each columns}}
                {{#if (neq this "Id")}} <!-- Exclude the "Id" column -->
                    <div class="form-group">
                        <label for="{{this}}">{{this}}:</label>
                        <input type="text" name="{{this}}" id="{{this}}" required>
                    </div>
                {{/if}}
            {{/each}}

            <button type="submit" id="submitButton">Submit</button>
        </form>
    </div>
</div>

<!-- Styling for Popup -->  
<style>
    /* Modal styles */
    .modal {
        display: none; /* Hidden by default */
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4); /* Black with transparency */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* Centered */
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        border-radius: 8px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .form-group {
        margin-bottom: 1em;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5em;
    }

    .form-group input {
        width: 100%;
        padding: 0.5em;
        box-sizing: border-box;
    }

    button {
        padding: 0.5em 1em;
        margin-top: 1em;
        cursor: pointer;
    }
</style>

<!-- Script for Popup -->  
<script>
(() => {
    function formDeserialize(form, data) {
        for (const input of form.getElementsByTagName("input")) {
            if (input.type === 'hidden') {
                continue;
            } else if (input.type === 'checkbox') {
                input.value = !!data[input.name];
            } else {
                input.value = data[input.name];
            }
        }
    }

    const modal = document.getElementById('formModal');
    const closeModalButton = document.getElementById('closeModalButton');
    const dataForm = document.getElementById('dataForm');
    const formMode = document.getElementById('formMode');
    const formTitle = document.getElementById('formTitle');

    // Open modal for Create mode
    document.getElementById('openModalButton').addEventListener('click', () => {
        formMode.value = "Create";
        formTitle.innerText = "New {{tableName}}";
        dataForm.reset();
        modal.style.display = 'block';
    });

    // Open modal for Update mode (called from table)
    window.openUpdateForm = (element) => {
        formMode.value = "Update";
        const rowData = {};
        const formData = {};
        for (var col of element.getElementsByTagName("td")) {
            rowData[col.id] = col.textContent;
        }
        console.log(rowData);
        {{#each columns}}
            formData["{{this}}"] = rowData[{{@key}}];
        {{/each}}
        console.log(formData);
        formDeserialize(dataForm, formData);

        modal.style.display = 'block';
    };

    // Close modal
    closeModalButton.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });

    // Handle form submission
    dataForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const formData = new FormData(dataForm);

        fetch(formMode.value === "Create" ? '/create' : '/update', {
            method: 'POST',
            body: formData
        })
        .then(async response => {
            modal.style.display = 'none';
            if (response.status == 200) { 
                load_table("{{tableName}}");
            } else {
                console.log(await response.text());
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('There was an error submitting the form.');
        });
    });
})();
</script>
