<!-- Popup Form -->  
<div id="formModal" class="modal">
    <div class="modal-content">
        <span class="close" id="closeModalButton">&times;</span>
        <h2 id="formTitle"></h2>

        <form id="dataForm">
            <!-- Hidden field to pass the table name and mode (Create/Update) -->
            <input type="hidden" name="tableName" value="{{tableName}}">
            <input type="hidden" name="formMode" id="formMode" value="Create">

            {{#each columns}}
                <div class="form-group">
                    <span class="label" style="display: inline-flex; align-items: start; width: 100%">
                        <label for="{{this.name}}">{{#if this.isPrimaryKey}}Primary key {{/if}}{{this.name}}:</label>
                        {{#if this.nullable}}
                        <input onchange="window.nullCheckBoxOnChange(this)"
                               style="width: min-content; align-self: center; margin-left: 5px;"
                               type="checkbox" id="{{this.name}}_NullCheckBox" name="{{this.name}}" value="true">
                        {{/if}}
                    </span>
                    <input type="text" name="{{this.name}}" id="{{this.name}}_FormInput">
                </div>
            {{/each}}

            <button class="submitButton" type="submit" id="submitButton">Submit</button>
        </form>
    </div>
</div>

<!-- Styling for Popup -->  
<style>
    /* Modal styles */
    .modal {
        display: none; /* Hidden by default */
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4); /* Black with transparency */
    }

    .modal-content {
        background-color: #3b3535;
        margin: 15% auto; /* Centered */
        padding: 20px;
        border: 1px solid #00ffee;
        width: 50%;
        border-radius: 8px;
    }
    
    .formTitle {
        margin-bottom: 2em
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .form-group {
        margin-bottom: 1em;
    }

    .form-group .label {
        display: block;
        margin-bottom: 0.5em;
    }

    .form-group input {
        width: 100%;
        padding: 0.5em;
        box-sizing: border-box;
        color: black;
    }
    .form-group input:disabled {
        width: 100%;
        padding: 0.5em;
        box-sizing: border-box;
        background-color: #f0f0f0;
        color: #a0a0a0;
        cursor: not-allowed;
    }

    .submitButton {
        padding: 0.5em 1em;
        border: 1px solid #00ffee;
        background-color: rgb(2, 248, 2);
        color: white;
        font-weight: bold;
        margin-top: 1em;
        cursor: pointer;
        border-radius: 8px;
    }

</style>

<!-- Script for Popup -->  
<script>
(() => {
    let oldData = {};
    function formGetData(data) {
        for (const key in oldData) {
            const nullCheckBox = document.getElementById(`${key}_NullCheckBox`);
            const input = document.getElementById(`${key}_FormInput`);
            if (nullCheckBox != null && !nullCheckBox.checked) {
                data[key] = null;
            } else if (input != null) {
                data[key] = input.value;
            } else {
                alert("Can't find " + key);
            }
        }
        console.log(data);
    }
    function formSetData(data) {
        for (const [key, val] of Object.entries(data)) {
            const input = document.getElementById(`${key}_FormInput`);
            const nullCheckBox = document.getElementById(`${key}_NullCheckBox`);
            if (val == null) {
                nullCheckBox.checked = false;
                input.disabled = true;
                input.value = "";
            } else {
                if (nullCheckBox != null) {
                    nullCheckBox.checked = true;
                }
                if (input == null) {
                    alert("can't find " + key);
                } else {
                    input.disabled = false;
                    input.value = val;
                }
            }
        }
    }

    const modal = document.getElementById('formModal');
    const closeModalButton = document.getElementById('closeModalButton');
    const dataForm = document.getElementById('dataForm');
    const formMode = document.getElementById('formMode');
    const formTitle = document.getElementById('formTitle');

    window.openCreateForm = (defaultData) => {
        formMode.value = "Create";
        formTitle.innerText = "New {{tableName}}";
        oldData = defaultData;
        formSetData(oldData);
        modal.style.display = 'block';
    }

    // Open modal for Update mode (called from table)
    window.openUpdateForm = (data) => {
        formMode.value = "Update";
        formTitle.innerText = "Edit {{tableName}}";
        oldData = data;
        console.log(oldData);
        formSetData(oldData);

        modal.style.display = 'block';
    };
    window.nullCheckBoxOnChange = (checkbox) => {
        const input = document.getElementById(`${checkbox.name}_FormInput`);
        if (checkbox.checked) {
            input.disabled = false;
        } else {
            input.disabled = true;
        }
    };

    // Delete row
    window.deleteRow = (data) => {
        try {
            console.log(data);
            const tableName = "{{tableName}}";
            if (confirm('Are you sure you want to delete this row?')) {
                fetch(`${window.location.origin}/table/${tableName}`, {
                    method: 'DELETE',
                    body: JSON.stringify(data),
                })
                .then(response => {
                    if (response.ok) {
                        alert('Row deleted successfully.');
                        load_table(tableName); // Reload table data (ensure this function exists)
                    } else {
                        return response.text().then(errorMessage => {
                            console.error('Error:', errorMessage);
                            alert(`Error deleting row: ${errorMessage}`);
                        });
                    }
                })
                .catch(error => {
                    console.error('Unexpected error:', error);
                    alert(`Unexpected error: ${error.message}`);
                });
            }
        } catch (error) {
            console.error('Unexpected error:', error);
            alert(`Unexpected error: ${error.message}`);
        }
    }

    // Close modal
    closeModalButton.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });

    // Handle form submission
    dataForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const formData = new FormData(dataForm);
        var newData = {};
        formGetData(newData);

        if (formMode.value === "Create") {
            fetch(`${window.location.origin}/table/{{tableName}}`, {
                method: "POST",
                body: JSON.stringify(newData)
            })
            .then(async response => {
                modal.style.display = 'none';
                if (response.status == 200) { 
                    load_table("{{tableName}}");
                } else {
                    console.log(await response.text());
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('There was an error submitting the form.');
            });
        } else {
            console.log(oldData);
            console.log(newData);
            fetch(`${window.location.origin}/table/{{tableName}}`, {
                method: "PATCH",
                body: JSON.stringify({oldData, newData}),
            })
            .then(async response => {
                modal.style.display = 'none';
                if (response.status == 200) { 
                    load_table("{{tableName}}");
                } else {
                    console.log(await response.text());
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('There was an error submitting the form.');
            });
        }
    });

    // Function to filter table rows based on the search query
     const searchField = document.getElementById("searchField");
    const table = document.querySelector("table");  // Select the table
    const tableBody = table.querySelector("tbody");  // Select the tbody

    searchField.addEventListener("input", (event) => {
        const query = event.target.value;
        const lowerCaseQuery = query.toLowerCase();

        const tableRows = Array.from(tableBody.querySelectorAll("tr"));

        tableRows.forEach((row) => {
            const rowText = Array.from(row.querySelectorAll("td"))
                .map((cell) => cell.textContent.toLowerCase())
                .join(" ");
            if (rowText.includes(lowerCaseQuery)) {
                row.style.display = ""; // Show the row
            } else {
                row.style.display = "none"; // Hide the row
            }
        });
    });
})();
</script>